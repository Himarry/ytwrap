{
    "sourceFile": "ytwrap/video.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1749738283286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749738291441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,4 +56,44 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n         \r\n+    def classify_youtube_videos(video_items):\r\n+    live_archives = []\r\n+    normal_videos = []\r\n+    shorts = []\r\n+\r\n+    for video in video_items:\r\n+        snippet = video.get('snippet', {})\r\n+        content_details = video.get('contentDetails', {})\r\n+        live_details = video.get('liveStreamingDetails', {})\r\n+        duration = content_details.get('duration', '')\r\n+        width = video.get('player', {}).get('width')   # 取得方法はAPI仕様による\r\n+        height = video.get('player', {}).get('height')\r\n+        title = snippet.get('title', '').lower()\r\n+\r\n+        # ライブアーカイブ判定\r\n+        if live_details:\r\n+            live_archives.append(video)\r\n+        # Shorts判定\r\n+        elif (\r\n+            duration and duration_to_seconds(duration) <= 60 and\r\n+            (height and width and height > width or '#shorts' in title)\r\n+        ):\r\n+            shorts.append(video)\r\n+        # 通常動画\r\n+        else:\r\n+            normal_videos.append(video)\r\n+\r\n+    return {\r\n+        'live_archives': live_archives,\r\n+        'normal_videos': normal_videos,\r\n+        'shorts': shorts,\r\n+    }\r\n+\r\n+def duration_to_seconds(duration):\r\n+    # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n+    import isodate\r\n+    try:\r\n+        return int(isodate.parse_duration(duration).total_seconds())\r\n+    except Exception:\r\n+        return 0\r\n"
                },
                {
                    "date": 1749738311636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,11 +89,11 @@\n         'normal_videos': normal_videos,\r\n         'shorts': shorts,\r\n     }\r\n \r\n-def duration_to_seconds(duration):\r\n-    # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n-    import isodate\r\n-    try:\r\n-        return int(isodate.parse_duration(duration).total_seconds())\r\n-    except Exception:\r\n-        return 0\r\n+    def duration_to_seconds(duration):\r\n+        # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n+        import isodate\r\n+        try:\r\n+            return int(isodate.parse_duration(duration).total_seconds())\r\n+        except Exception:\r\n+            return 0\r\n"
                },
                {
                    "date": 1749738317608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,11 @@\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n         \r\n     def classify_youtube_videos(video_items):\r\n-    live_archives = []\r\n-    normal_videos = []\r\n-    shorts = []\r\n+        live_archives = []\r\n+        normal_videos = []\r\n+        shorts = []\r\n \r\n     for video in video_items:\r\n         snippet = video.get('snippet', {})\r\n         content_details = video.get('contentDetails', {})\r\n"
                },
                {
                    "date": 1749738327592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,35 +61,35 @@\n         live_archives = []\r\n         normal_videos = []\r\n         shorts = []\r\n \r\n-    for video in video_items:\r\n-        snippet = video.get('snippet', {})\r\n-        content_details = video.get('contentDetails', {})\r\n-        live_details = video.get('liveStreamingDetails', {})\r\n-        duration = content_details.get('duration', '')\r\n-        width = video.get('player', {}).get('width')   # 取得方法はAPI仕様による\r\n-        height = video.get('player', {}).get('height')\r\n-        title = snippet.get('title', '').lower()\r\n+        for video in video_items:\r\n+            snippet = video.get('snippet', {})\r\n+            content_details = video.get('contentDetails', {})\r\n+            live_details = video.get('liveStreamingDetails', {})\r\n+            duration = content_details.get('duration', '')\r\n+            width = video.get('player', {}).get('width')   # 取得方法はAPI仕様による\r\n+            height = video.get('player', {}).get('height')\r\n+            title = snippet.get('title', '').lower()\r\n \r\n-        # ライブアーカイブ判定\r\n-        if live_details:\r\n-            live_archives.append(video)\r\n-        # Shorts判定\r\n-        elif (\r\n-            duration and duration_to_seconds(duration) <= 60 and\r\n-            (height and width and height > width or '#shorts' in title)\r\n-        ):\r\n-            shorts.append(video)\r\n-        # 通常動画\r\n-        else:\r\n-            normal_videos.append(video)\r\n+            # ライブアーカイブ判定\r\n+            if live_details:\r\n+                live_archives.append(video)\r\n+            # Shorts判定\r\n+            elif (\r\n+                duration and duration_to_seconds(duration) <= 60 and\r\n+                (height and width and height > width or '#shorts' in title)\r\n+            ):\r\n+                shorts.append(video)\r\n+            # 通常動画\r\n+            else:\r\n+                normal_videos.append(video)\r\n \r\n-    return {\r\n-        'live_archives': live_archives,\r\n-        'normal_videos': normal_videos,\r\n-        'shorts': shorts,\r\n-    }\r\n+        return {\r\n+            'live_archives': live_archives,\r\n+            'normal_videos': normal_videos,\r\n+            'shorts': shorts,\r\n+        }\r\n \r\n     def duration_to_seconds(duration):\r\n         # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n         import isodate\r\n"
                },
                {
                    "date": 1749738337168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n             if live_details:\r\n                 live_archives.append(video)\r\n             # Shorts判定\r\n             elif (\r\n-                duration and duration_to_seconds(duration) <= 60 and\r\n+                    duration and duration_to_seconds(duration) <= 60 and\r\n                 (height and width and height > width or '#shorts' in title)\r\n             ):\r\n                 shorts.append(video)\r\n             # 通常動画\r\n"
                },
                {
                    "date": 1749738345691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             return None\r\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n-        \r\n+\r\n     def classify_youtube_videos(video_items):\r\n         live_archives = []\r\n         normal_videos = []\r\n         shorts = []\r\n@@ -75,9 +75,9 @@\n             if live_details:\r\n                 live_archives.append(video)\r\n             # Shorts判定\r\n             elif (\r\n-                    duration and duration_to_seconds(duration) <= 60 and\r\n+                duration and duration_to_seconds(duration) <= 60 and\r\n                 (height and width and height > width or '#shorts' in title)\r\n             ):\r\n                 shorts.append(video)\r\n             # 通常動画\r\n"
                },
                {
                    "date": 1749738466363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,44 +56,45 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n-    def classify_youtube_videos(video_items):\r\n-        live_archives = []\r\n-        normal_videos = []\r\n-        shorts = []\r\n+def duration_to_seconds(duration):\r\n+    # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n+    import isodate\r\n+    try:\r\n+        return int(isodate.parse_duration(duration).total_seconds())\r\n+    except Exception:\r\n+        return 0\r\n \r\n-        for video in video_items:\r\n-            snippet = video.get('snippet', {})\r\n-            content_details = video.get('contentDetails', {})\r\n-            live_details = video.get('liveStreamingDetails', {})\r\n-            duration = content_details.get('duration', '')\r\n-            width = video.get('player', {}).get('width')   # 取得方法はAPI仕様による\r\n-            height = video.get('player', {}).get('height')\r\n-            title = snippet.get('title', '').lower()\r\n+def classify_youtube_videos(video_items):\r\n+    live_archives = []\r\n+    normal_videos = []\r\n+    shorts = []\r\n \r\n-            # ライブアーカイブ判定\r\n-            if live_details:\r\n-                live_archives.append(video)\r\n-            # Shorts判定\r\n-            elif (\r\n-                duration and duration_to_seconds(duration) <= 60 and\r\n-                (height and width and height > width or '#shorts' in title)\r\n-            ):\r\n-                shorts.append(video)\r\n-            # 通常動画\r\n-            else:\r\n-                normal_videos.append(video)\r\n+    for video in video_items:\r\n+        snippet = video.get('snippet', {})\r\n+        content_details = video.get('contentDetails', {})\r\n+        live_details = video.get('liveStreamingDetails', {})\r\n+        duration = content_details.get('duration', '')\r\n+        width = video.get('player', {}).get('width')   # 取得方法はAPI仕様による\r\n+        height = video.get('player', {}).get('height')\r\n+        title = snippet.get('title', '').lower()\r\n \r\n-        return {\r\n-            'live_archives': live_archives,\r\n-            'normal_videos': normal_videos,\r\n-            'shorts': shorts,\r\n-        }\r\n+        # ライブアーカイブ判定\r\n+        if live_details:\r\n+            live_archives.append(video)\r\n+        # Shorts判定\r\n+        elif (\r\n+            duration and duration_to_seconds(duration) <= 60 and\r\n+            (height and width and height > width or '#shorts' in title)\r\n+        ):\r\n+            shorts.append(video)\r\n+        # 通常動画\r\n+        else:\r\n+            normal_videos.append(video)\r\n \r\n-    def duration_to_seconds(duration):\r\n-        # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n-        import isodate\r\n-        try:\r\n-            return int(isodate.parse_duration(duration).total_seconds())\r\n-        except Exception:\r\n-            return 0\r\n+    return {\r\n+        'live_archives': live_archives,\r\n+        'normal_videos': normal_videos,\r\n+        'shorts': shorts,\r\n+    }\r\n+\r\n"
                },
                {
                    "date": 1749739484739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n             live_archives.append(video)\r\n         # Shorts判定\r\n         elif (\r\n             duration and duration_to_seconds(duration) <= 60 and\r\n-            (height and width and height > width or '#shorts' in title)\r\n+            (hedight and width and height > width or '#shorts' in title)\r\n         ):\r\n             shorts.append(video)\r\n         # 通常動画\r\n         else:\r\n"
                },
                {
                    "date": 1749739506486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n             live_archives.append(video)\r\n         # Shorts判定\r\n         elif (\r\n             duration and duration_to_seconds(duration) <= 60 and\r\n-            (hedight and width and height > width or '#shorts' in title)\r\n+            (height and width and height > width or '#shorts' in title)\r\n         ):\r\n             shorts.append(video)\r\n         # 通常動画\r\n         else:\r\n"
                },
                {
                    "date": 1749740160201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,16 +57,26 @@\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n def duration_to_seconds(duration):\r\n-    # ISO 8601 duration → 秒に変換する関数（例: 'PT59S' → 59）\r\n+    \"\"\"\r\n+    ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n+    例: 'PT59S' → 59, 'PT1M30S' → 90\r\n+    \"\"\"\r\n     import isodate\r\n     try:\r\n         return int(isodate.parse_duration(duration).total_seconds())\r\n     except Exception:\r\n         return 0\r\n \r\n+\r\n def classify_youtube_videos(video_items):\r\n+    \"\"\"\r\n+    YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n+    - live_archives: liveStreamingDetailsが存在するもの\r\n+    - shorts: 60秒以下かつ縦長 or タイトルに#shorts\r\n+    - normal_videos: 上記以外\r\n+    \"\"\"\r\n     live_archives = []\r\n     normal_videos = []\r\n     shorts = []\r\n \r\n@@ -74,9 +84,9 @@\n         snippet = video.get('snippet', {})\r\n         content_details = video.get('contentDetails', {})\r\n         live_details = video.get('liveStreamingDetails', {})\r\n         duration = content_details.get('duration', '')\r\n-        width = video.get('player', {}).get('width')   # 取得方法はAPI仕様による\r\n+        width = video.get('player', {}).get('width')\r\n         height = video.get('player', {}).get('height')\r\n         title = snippet.get('title', '').lower()\r\n \r\n         # ライブアーカイブ判定\r\n"
                },
                {
                    "date": 1749740480779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,11 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n+\r\n+# --- グローバル関数はファイル末尾にまとめて移動 ---\r\n+\r\n def duration_to_seconds(duration):\r\n     \"\"\"\r\n     ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n     例: 'PT59S' → 59, 'PT1M30S' → 90\r\n"
                },
                {
                    "date": 1749740498994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,8 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n-\r\n-# --- グローバル関数はファイル末尾にまとめて移動 ---\r\n-\r\n def duration_to_seconds(duration):\r\n     \"\"\"\r\n     ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n     例: 'PT59S' → 59, 'PT1M30S' → 90\r\n"
                },
                {
                    "date": 1749740504086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,55 +56,55 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n-def duration_to_seconds(duration):\r\n-    \"\"\"\r\n-    ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n-    例: 'PT59S' → 59, 'PT1M30S' → 90\r\n-    \"\"\"\r\n-    import isodate\r\n-    try:\r\n-        return int(isodate.parse_duration(duration).total_seconds())\r\n-    except Exception:\r\n-        return 0\r\n+    def duration_to_seconds(duration):\r\n+        \"\"\"\r\n+        ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n+        例: 'PT59S' → 59, 'PT1M30S' → 90\r\n+        \"\"\"\r\n+        import isodate\r\n+        try:\r\n+            return int(isodate.parse_duration(duration).total_seconds())\r\n+        except Exception:\r\n+            return 0\r\n \r\n \r\n-def classify_youtube_videos(video_items):\r\n-    \"\"\"\r\n-    YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n-    - live_archives: liveStreamingDetailsが存在するもの\r\n-    - shorts: 60秒以下かつ縦長 or タイトルに#shorts\r\n-    - normal_videos: 上記以外\r\n-    \"\"\"\r\n-    live_archives = []\r\n-    normal_videos = []\r\n-    shorts = []\r\n+    def classify_youtube_videos(video_items):\r\n+        \"\"\"\r\n+        YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n+        - live_archives: liveStreamingDetailsが存在するもの\r\n+        - shorts: 60秒以下かつ縦長 or タイトルに#shorts\r\n+        - normal_videos: 上記以外\r\n+        \"\"\"\r\n+        live_archives = []\r\n+        normal_videos = []\r\n+        shorts = []\r\n \r\n-    for video in video_items:\r\n-        snippet = video.get('snippet', {})\r\n-        content_details = video.get('contentDetails', {})\r\n-        live_details = video.get('liveStreamingDetails', {})\r\n-        duration = content_details.get('duration', '')\r\n-        width = video.get('player', {}).get('width')\r\n-        height = video.get('player', {}).get('height')\r\n-        title = snippet.get('title', '').lower()\r\n+        for video in video_items:\r\n+            snippet = video.get('snippet', {})\r\n+            content_details = video.get('contentDetails', {})\r\n+            live_details = video.get('liveStreamingDetails', {})\r\n+            duration = content_details.get('duration', '')\r\n+            width = video.get('player', {}).get('width')\r\n+            height = video.get('player', {}).get('height')\r\n+            title = snippet.get('title', '').lower()\r\n \r\n-        # ライブアーカイブ判定\r\n-        if live_details:\r\n-            live_archives.append(video)\r\n-        # Shorts判定\r\n-        elif (\r\n-            duration and duration_to_seconds(duration) <= 60 and\r\n-            (height and width and height > width or '#shorts' in title)\r\n-        ):\r\n-            shorts.append(video)\r\n-        # 通常動画\r\n-        else:\r\n-            normal_videos.append(video)\r\n+            # ライブアーカイブ判定\r\n+            if live_details:\r\n+                live_archives.append(video)\r\n+            # Shorts判定\r\n+            elif (\r\n+                duration and duration_to_seconds(duration) <= 60 and\r\n+                (height and width and height > width or '#shorts' in title)\r\n+            ):\r\n+                shorts.append(video)\r\n+            # 通常動画\r\n+            else:\r\n+                normal_videos.append(video)\r\n \r\n-    return {\r\n-        'live_archives': live_archives,\r\n-        'normal_videos': normal_videos,\r\n-        'shorts': shorts,\r\n-    }\r\n+        return {\r\n+            'live_archives': live_archives,\r\n+            'normal_videos': normal_videos,\r\n+            'shorts': shorts,\r\n+        }\r\n \r\n"
                },
                {
                    "date": 1749740523591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n+    @staticmethod\r\n     def duration_to_seconds(duration):\r\n         \"\"\"\r\n         ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n         例: 'PT59S' → 59, 'PT1M30S' → 90\r\n@@ -67,9 +68,9 @@\n             return int(isodate.parse_duration(duration).total_seconds())\r\n         except Exception:\r\n             return 0\r\n \r\n-\r\n+    @staticmethod\r\n     def classify_youtube_videos(video_items):\r\n         \"\"\"\r\n         YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n         - live_archives: liveStreamingDetailsが存在するもの\r\n"
                },
                {
                    "date": 1749740569456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,8 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n-    @staticmethod\r\n     def duration_to_seconds(duration):\r\n         \"\"\"\r\n         ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n         例: 'PT59S' → 59, 'PT1M30S' → 90\r\n@@ -68,9 +67,9 @@\n             return int(isodate.parse_duration(duration).total_seconds())\r\n         except Exception:\r\n             return 0\r\n \r\n-    @staticmethod\r\n+\r\n     def classify_youtube_videos(video_items):\r\n         \"\"\"\r\n         YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n         - live_archives: liveStreamingDetailsが存在するもの\r\n"
                },
                {
                    "date": 1749740609829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n+    @staticmethod\r\n     def duration_to_seconds(duration):\r\n         \"\"\"\r\n         ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n         例: 'PT59S' → 59, 'PT1M30S' → 90\r\n@@ -67,9 +68,9 @@\n             return int(isodate.parse_duration(duration).total_seconds())\r\n         except Exception:\r\n             return 0\r\n \r\n-\r\n+    @staticmethod\r\n     def classify_youtube_videos(video_items):\r\n         \"\"\"\r\n         YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n         - live_archives: liveStreamingDetailsが存在するもの\r\n@@ -93,9 +94,9 @@\n             if live_details:\r\n                 live_archives.append(video)\r\n             # Shorts判定\r\n             elif (\r\n-                duration and duration_to_seconds(duration) <= 60 and\r\n+                duration and YTVideoClient.duration_to_seconds(duration) <= 60 and\r\n                 (height and width and height > width or '#shorts' in title)\r\n             ):\r\n                 shorts.append(video)\r\n             # 通常動画\r\n"
                },
                {
                    "date": 1749740632478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n             if live_details:\r\n                 live_archives.append(video)\r\n             # Shorts判定\r\n             elif (\r\n-                duration and YTVideoClient.duration_to_seconds(duration) <= 60 and\r\n+                duration and duration_to_seconds(duration) <= 60 and\r\n                 (height and width and height > width or '#shorts' in title)\r\n             ):\r\n                 shorts.append(video)\r\n             # 通常動画\r\n"
                },
                {
                    "date": 1749740658619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n             if live_details:\r\n                 live_archives.append(video)\r\n             # Shorts判定\r\n             elif (\r\n-                duration and duration_to_seconds(duration) <= 60 and\r\n+                duration and YTVideoClient.duration_to_seconds(duration) <= 60 and\r\n                 (height and width and height > width or '#shorts' in title)\r\n             ):\r\n                 shorts.append(video)\r\n             # 通常動画\r\n"
                },
                {
                    "date": 1749740695094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,56 +56,4 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n-    @staticmethod\r\n-    def duration_to_seconds(duration):\r\n-        \"\"\"\r\n-        ISO 8601形式のYouTube動画の長さ（例: 'PT59S', 'PT1H2M3S'など）を秒数（int）に変換する関数。\r\n-        例: 'PT59S' → 59, 'PT1M30S' → 90\r\n-        \"\"\"\r\n-        import isodate\r\n-        try:\r\n-            return int(isodate.parse_duration(duration).total_seconds())\r\n-        except Exception:\r\n-            return 0\r\n-\r\n-    @staticmethod\r\n-    def classify_youtube_videos(video_items):\r\n-        \"\"\"\r\n-        YouTube動画リストを「ライブアーカイブ」「ショート」「通常動画」に分類する関数。\r\n-        - live_archives: liveStreamingDetailsが存在するもの\r\n-        - shorts: 60秒以下かつ縦長 or タイトルに#shorts\r\n-        - normal_videos: 上記以外\r\n-        \"\"\"\r\n-        live_archives = []\r\n-        normal_videos = []\r\n-        shorts = []\r\n-\r\n-        for video in video_items:\r\n-            snippet = video.get('snippet', {})\r\n-            content_details = video.get('contentDetails', {})\r\n-            live_details = video.get('liveStreamingDetails', {})\r\n-            duration = content_details.get('duration', '')\r\n-            width = video.get('player', {}).get('width')\r\n-            height = video.get('player', {}).get('height')\r\n-            title = snippet.get('title', '').lower()\r\n-\r\n-            # ライブアーカイブ判定\r\n-            if live_details:\r\n-                live_archives.append(video)\r\n-            # Shorts判定\r\n-            elif (\r\n-                duration and YTVideoClient.duration_to_seconds(duration) <= 60 and\r\n-                (height and width and height > width or '#shorts' in title)\r\n-            ):\r\n-                shorts.append(video)\r\n-            # 通常動画\r\n-            else:\r\n-                normal_videos.append(video)\r\n-\r\n-        return {\r\n-            'live_archives': live_archives,\r\n-            'normal_videos': normal_videos,\r\n-            'shorts': shorts,\r\n-        }\r\n-\r\n"
                },
                {
                    "date": 1749740748589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import os\r\n from googleapiclient.discovery import build\r\n from googleapiclient.errors import HttpError\r\n-from typing import Optional, Dict, Any\r\n+from typing import Optional, Dict, Any, List\r\n \r\n class YTVideoClient:\r\n     \"\"\"\r\n     YouTube動画・チャンネル情報取得用クラス\r\n@@ -56,4 +56,97 @@\n         except HttpError as e:\r\n             print(f\"動画統計取得エラー: {e}\")\r\n             return None\r\n \r\n+    def get_videos_by_type(\r\n+        self, channel_id: str, max_results: int = 50\r\n+    ) -> Dict[str, List[Dict[str, Any]]]:\r\n+        \"\"\"\r\n+        指定チャンネルの動画を「ライブ配信アーカイブ」「通常動画」「Shorts」に分類して取得する\r\n+\r\n+        Returns:\r\n+            {\r\n+                \"live_archives\": [...],\r\n+                \"normal_videos\": [...],\r\n+                \"shorts\": [...]\r\n+            }\r\n+        \"\"\"\r\n+        import isodate\r\n+\r\n+        def duration_to_seconds(duration: str) -> int:\r\n+            try:\r\n+                return int(isodate.parse_duration(duration).total_seconds())\r\n+            except Exception:\r\n+                return 0\r\n+\r\n+        # まずアップロード動画のplaylistIdを取得\r\n+        channel_info = self.get_channel_info(channel_id)\r\n+        if not channel_info:\r\n+            return {\"live_archives\": [], \"normal_videos\": [], \"shorts\": []}\r\n+        uploads_playlist_id = channel_info['contentDetails']['relatedPlaylists']['uploads']\r\n+\r\n+        # プレイリストから動画ID一覧を取得\r\n+        video_ids = []\r\n+        next_page_token = None\r\n+        while True:\r\n+            try:\r\n+                playlist_response = self.youtube.playlistItems().list(\r\n+                    part='snippet',\r\n+                    playlistId=uploads_playlist_id,\r\n+                    maxResults=min(max_results, 50),\r\n+                    pageToken=next_page_token\r\n+                ).execute()\r\n+            except HttpError as e:\r\n+                print(f\"プレイリスト取得エラー: {e}\")\r\n+                break\r\n+            for item in playlist_response.get('items', []):\r\n+                video_ids.append(item['snippet']['resourceId']['videoId'])\r\n+                if len(video_ids) >= max_results:\r\n+                    break\r\n+            next_page_token = playlist_response.get('nextPageToken')\r\n+            if not next_page_token or len(video_ids) >= max_results:\r\n+                break\r\n+\r\n+        # 動画情報を一括取得\r\n+        live_archives = []\r\n+        normal_videos = []\r\n+        shorts = []\r\n+        for i in range(0, len(video_ids), 50):\r\n+            batch_ids = video_ids[i:i+50]\r\n+            try:\r\n+                videos_response = self.youtube.videos().list(\r\n+                    part='snippet,contentDetails,liveStreamingDetails',\r\n+                    id=','.join(batch_ids)\r\n+                ).execute()\r\n+            except HttpError as e:\r\n+                print(f\"動画情報取得エラー: {e}\")\r\n+                continue\r\n+            for video in videos_response.get('items', []):\r\n+                snippet = video.get('snippet', {})\r\n+                content_details = video.get('contentDetails', {})\r\n+                live_details = video.get('liveStreamingDetails', {})\r\n+                duration = content_details.get('duration', '')\r\n+                title = snippet.get('title', '').lower()\r\n+                width = snippet.get('thumbnails', {}).get('maxres', {}).get('width') or \\\r\n+                        snippet.get('thumbnails', {}).get('standard', {}).get('width') or \\\r\n+                        snippet.get('thumbnails', {}).get('high', {}).get('width')\r\n+                height = snippet.get('thumbnails', {}).get('maxres', {}).get('height') or \\\r\n+                         snippet.get('thumbnails', {}).get('standard', {}).get('height') or \\\r\n+                         snippet.get('thumbnails', {}).get('high', {}).get('height')\r\n+\r\n+                # ライブ配信（アーカイブ含む）判定\r\n+                if live_details:\r\n+                    live_archives.append(video)\r\n+                # Shorts判定（60秒以下＆縦長 or タイトルに#shorts）\r\n+                elif (\r\n+                    duration and duration_to_seconds(duration) <= 60 and\r\n+                    ((height and width and height > width) or '#shorts' in title)\r\n+                ):\r\n+                    shorts.append(video)\r\n+                else:\r\n+                    normal_videos.append(video)\r\n+\r\n+        return {\r\n+            \"live_archives\": live_archives,\r\n+            \"normal_videos\": normal_videos,\r\n+            \"shorts\": shorts\r\n+        }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749741907063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,5 +148,7 @@\n         return {\r\n             \"live_archives\": live_archives,\r\n             \"normal_videos\": normal_videos,\r\n             \"shorts\": shorts\r\n-        }\n\\ No newline at end of file\n+        }\r\n+        \r\n+class YTVideoClient:\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749741946518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,7 +148,5 @@\n         return {\r\n             \"live_archives\": live_archives,\r\n             \"normal_videos\": normal_videos,\r\n             \"shorts\": shorts\r\n-        }\r\n-        \r\n-class YTVideoClient:\n\\ No newline at end of file\n+        }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749738283286,
            "name": "Commit-0",
            "content": "import os\r\nfrom googleapiclient.discovery import build\r\nfrom googleapiclient.errors import HttpError\r\nfrom typing import Optional, Dict, Any\r\n\r\nclass YTVideoClient:\r\n    \"\"\"\r\n    YouTube動画・チャンネル情報取得用クラス\r\n    \"\"\"\r\n    def __init__(self, api_key: Optional[str] = None):\r\n        self.api_key = api_key or os.getenv('YOUTUBE_API_KEY')\r\n        if not self.api_key:\r\n            raise ValueError(\"環境変数 YOUTUBE_API_KEY が設定されていません\")\r\n        self.youtube = build('youtube', 'v3', developerKey=self.api_key)\r\n\r\n    def get_channel_info(self, channel_id: str) -> Optional[Dict[str, Any]]:\r\n        try:\r\n            response = self.youtube.channels().list(\r\n                part='snippet,contentDetails',\r\n                id=channel_id\r\n            ).execute()\r\n            if response['items']:\r\n                return response['items'][0]\r\n            return None\r\n        except HttpError as e:\r\n            print(f\"チャンネル情報取得エラー: {e}\")\r\n            return None\r\n\r\n    def get_latest_video(self, channel_id: str) -> Optional[Dict[str, Any]]:\r\n        info = self.get_channel_info(channel_id)\r\n        if not info:\r\n            return None\r\n        uploads_playlist_id = info['contentDetails']['relatedPlaylists']['uploads']\r\n        try:\r\n            playlist_response = self.youtube.playlistItems().list(\r\n                part='snippet',\r\n                playlistId=uploads_playlist_id,\r\n                maxResults=1\r\n            ).execute()\r\n            if playlist_response['items']:\r\n                return playlist_response['items'][0]['snippet']\r\n            return None\r\n        except HttpError as e:\r\n            print(f\"最新動画取得エラー: {e}\")\r\n            return None\r\n\r\n    def get_video_statistics(self, video_id: str) -> Optional[Dict[str, Any]]:\r\n        try:\r\n            response = self.youtube.videos().list(\r\n                part='statistics',\r\n                id=video_id\r\n            ).execute()\r\n            if response['items']:\r\n                return response['items'][0]['statistics']\r\n            return None\r\n        except HttpError as e:\r\n            print(f\"動画統計取得エラー: {e}\")\r\n            return None\r\n        \r\n"
        }
    ]
}