{
    "sourceFile": "ytwrap/analysi.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1749792235783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749792241858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-C\n\\ No newline at end of file\n+class YT\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749792248832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-class YT\n\\ No newline at end of file\n+class YTAnalysis:\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749792395280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,49 @@\n-class YTAnalysis:\n\\ No newline at end of file\n+import json\r\n+from datetime import datetime\r\n+from typing import Optional\r\n+\r\n+class YTAnalysis:\r\n+    def __init__(self, json_path: str):\r\n+        \"\"\"\r\n+        :param json_path: 増加率履歴を保存するJSONファイルのパス\r\n+        \"\"\"\r\n+        self.json_path = json_path\r\n+\r\n+    def record_subscriber_growth(self, count: int, date: Optional[datetime] = None):\r\n+        \"\"\"\r\n+        現在の登録者数を記録し、前回との差分から増加率を計算して\r\n+        日付・登録者数・増加率をJSONファイルに追記保存する\r\n+        :param count: 現在の登録者数\r\n+        :param date: 日付（デフォルトは現在日時）\r\n+        \"\"\"\r\n+        if date is None:\r\n+            date = datetime.now()\r\n+        date_str = date.strftime(\"%Y-%m-%d\")\r\n+\r\n+        # 既存データを読み込み\r\n+        try:\r\n+            with open(self.json_path, \"r\", encoding=\"utf-8\") as f:\r\n+                data = json.load(f)\r\n+        except (FileNotFoundError, json.JSONDecodeError):\r\n+            data = []\r\n+\r\n+        # 前回データがあれば増加率を算出\r\n+        if data:\r\n+            last = data[-1]\r\n+            last_count = last[\"subscribers\"]\r\n+            last_date = datetime.strptime(last[\"date\"], \"%Y-%m-%d\")\r\n+            days = (date - last_date).days or 1\r\n+            growth = (count - last_count) / days\r\n+        else:\r\n+            growth = 0  # 初回は増加率0\r\n+\r\n+        # データを追記\r\n+        data.append({\r\n+            \"date\": date_str,\r\n+            \"subscribers\": count,\r\n+            \"growth_per_day\": growth\r\n+        })\r\n+\r\n+        # 保存\r\n+        with open(self.json_path, \"w\", encoding=\"utf-8\") as f:\r\n+            json.dump(data, f, ensure_ascii=False, indent=2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749792457088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,14 @@\n from datetime import datetime\r\n from typing import Optional\r\n \r\n class YTAnalysis:\r\n-    def __init__(self, json_path: str):\r\n+    def __init__(self, channel_id: str, json_path: str):\r\n         \"\"\"\r\n+        :param channel_id: 監視したいYouTubeチャンネルID\r\n         :param json_path: 増加率履歴を保存するJSONファイルのパス\r\n         \"\"\"\r\n+        self.channel_id = channel_id\r\n         self.json_path = json_path\r\n \r\n     def record_subscriber_growth(self, count: int, date: Optional[datetime] = None):\r\n         \"\"\"\r\n@@ -38,8 +40,9 @@\n             growth = 0  # 初回は増加率0\r\n \r\n         # データを追記\r\n         data.append({\r\n+            \"channel_id\": self.channel_id,\r\n             \"date\": date_str,\r\n             \"subscribers\": count,\r\n             \"growth_per_day\": growth\r\n         })\r\n"
                },
                {
                    "date": 1749793098057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import json\r\n from datetime import datetime\r\n-from typing import Optional\r\n+from typing import Optional, Callable\r\n \r\n class YTAnalysis:\r\n     def __init__(self, channel_id: str, json_path: str):\r\n         \"\"\"\r\n@@ -9,16 +9,32 @@\n         :param json_path: 増加率履歴を保存するJSONファイルのパス\r\n         \"\"\"\r\n         self.channel_id = channel_id\r\n         self.json_path = json_path\r\n+        self._fetched = False  # 初回fetch済みフラグ\r\n \r\n-    def record_subscriber_growth(self, count: int, date: Optional[datetime] = None):\r\n+    def fetch_current_subscribers(self, fetch_func: Callable[[str], int]) -> int:\r\n         \"\"\"\r\n+        fetch_funcを利用して現在の登録者数を取得し、jsonに保存する\r\n+        :param fetch_func: チャンネルIDを受け取って登録者数を返す関数\r\n+        :return: 取得した登録者数\r\n+        \"\"\"\r\n+        count = fetch_func(self.channel_id)\r\n+        self._fetched = True\r\n+        self.record_subscriber_growth(count)\r\n+        return count\r\n+\r\n+    def record_subscriber_growth(self, count: int, date: Optional[datetime] = None, subscribe_client=None):\r\n+        \"\"\"\r\n         現在の登録者数を記録し、前回との差分から増加率を計算して\r\n         日付・登録者数・増加率をJSONファイルに追記保存する\r\n+        また subscribe_client (YTSubscribeClient) が渡された場合は履歴も追加する\r\n         :param count: 現在の登録者数\r\n         :param date: 日付（デフォルトは現在日時）\r\n+        :param subscribe_client: YTSubscribeClientのインスタンス（連携用）\r\n         \"\"\"\r\n+        if not self._fetched:\r\n+            raise RuntimeError(\"fetch_current_subscribersを先に実行してください\")\r\n         if date is None:\r\n             date = datetime.now()\r\n         date_str = date.strftime(\"%Y-%m-%d\")\r\n \r\n@@ -48,5 +64,9 @@\n         })\r\n \r\n         # 保存\r\n         with open(self.json_path, \"w\", encoding=\"utf-8\") as f:\r\n-            json.dump(data, f, ensure_ascii=False, indent=2)\n\\ No newline at end of file\n+            json.dump(data, f, ensure_ascii=False, indent=2)\r\n+\r\n+        # YTSubscribeClient との連携\r\n+        if subscribe_client is not None and hasattr(subscribe_client, \"add_history\"):\r\n+            subscribe_client.add_history(count, date)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749799351889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,72 +1,79 @@\n import json\r\n+import time\r\n from datetime import datetime\r\n from typing import Optional, Callable\r\n \r\n class YTAnalysis:\r\n     def __init__(self, channel_id: str, json_path: str):\r\n-        \"\"\"\r\n-        :param channel_id: 監視したいYouTubeチャンネルID\r\n-        :param json_path: 増加率履歴を保存するJSONファイルのパス\r\n-        \"\"\"\r\n         self.channel_id = channel_id\r\n         self.json_path = json_path\r\n-        self._fetched = False  # 初回fetch済みフラグ\r\n+        self._fetched = False\r\n \r\n     def fetch_current_subscribers(self, fetch_func: Callable[[str], int]) -> int:\r\n-        \"\"\"\r\n-        fetch_funcを利用して現在の登録者数を取得し、jsonに保存する\r\n-        :param fetch_func: チャンネルIDを受け取って登録者数を返す関数\r\n-        :return: 取得した登録者数\r\n-        \"\"\"\r\n         count = fetch_func(self.channel_id)\r\n         self._fetched = True\r\n         self.record_subscriber_growth(count)\r\n         return count\r\n \r\n     def record_subscriber_growth(self, count: int, date: Optional[datetime] = None, subscribe_client=None):\r\n-        \"\"\"\r\n-        現在の登録者数を記録し、前回との差分から増加率を計算して\r\n-        日付・登録者数・増加率をJSONファイルに追記保存する\r\n-        また subscribe_client (YTSubscribeClient) が渡された場合は履歴も追加する\r\n-        :param count: 現在の登録者数\r\n-        :param date: 日付（デフォルトは現在日時）\r\n-        :param subscribe_client: YTSubscribeClientのインスタンス（連携用）\r\n-        \"\"\"\r\n         if not self._fetched:\r\n             raise RuntimeError(\"fetch_current_subscribersを先に実行してください\")\r\n         if date is None:\r\n             date = datetime.now()\r\n-        date_str = date.strftime(\"%Y-%m-%d\")\r\n+        date_str = date.strftime(\"%Y-%m-%d %H:%M:%S\")  # 時刻も保存\r\n \r\n-        # 既存データを読み込み\r\n         try:\r\n             with open(self.json_path, \"r\", encoding=\"utf-8\") as f:\r\n                 data = json.load(f)\r\n         except (FileNotFoundError, json.JSONDecodeError):\r\n             data = []\r\n \r\n-        # 前回データがあれば増加率を算出\r\n         if data:\r\n             last = data[-1]\r\n             last_count = last[\"subscribers\"]\r\n-            last_date = datetime.strptime(last[\"date\"], \"%Y-%m-%d\")\r\n-            days = (date - last_date).days or 1\r\n-            growth = (count - last_count) / days\r\n+            last_date = datetime.strptime(last[\"date\"], \"%Y-%m-%d %H:%M:%S\")\r\n+            seconds = (date - last_date).total_seconds()\r\n+            hours = seconds / 3600 if seconds else 1\r\n+            growth = (count - last_count) / hours\r\n         else:\r\n-            growth = 0  # 初回は増加率0\r\n+            growth = 0\r\n \r\n-        # データを追記\r\n         data.append({\r\n             \"channel_id\": self.channel_id,\r\n             \"date\": date_str,\r\n             \"subscribers\": count,\r\n-            \"growth_per_day\": growth\r\n+            \"growth_per_hour\": growth\r\n\\ No newline at end of file\n         })\r\n \r\n-        # 保存\r\n         with open(self.json_path, \"w\", encoding=\"utf-8\") as f:\r\n             json.dump(data, f, ensure_ascii=False, indent=2)\r\n \r\n-        # YTSubscribeClient との連携\r\n         if subscribe_client is not None and hasattr(subscribe_client, \"add_history\"):\r\n-            subscribe_client.add_history(count, date)\n+            subscribe_client.add_history(count, date)\r\n+\r\n+    def start_monitoring(\r\n+        self,\r\n+        fetch_func: Callable[[str], int],\r\n+        interval_seconds: int = 3600,\r\n+        subscribe_client=None,\r\n+        stop_after: Optional[int] = None\r\n+    ):\r\n+        \"\"\"\r\n+        指定間隔ごとに自動で登録者数を監視・記録する\r\n+        :param fetch_func: 登録者数取得関数\r\n+        :param interval_seconds: 監視間隔（秒）\r\n+        :param subscribe_client: YTSubscribeClient（任意）\r\n+        :param stop_after: 監視ループ回数（Noneなら無限）\r\n+        \"\"\"\r\n+        self.fetch_current_subscribers(fetch_func)\r\n+        count = 0\r\n+        while stop_after is None or count < stop_after:\r\n+            time.sleep(interval_seconds)\r\n+            subs = fetch_func(self.channel_id)\r\n+            self.record_subscriber_growth(subs, subscribe_client=subscribe_client)\r\n+            count += 1\r\n+            print(f\"[{datetime.now()}] 登録者数: {subs} を記録しました\")\r\n+\r\n+# 使い方例（1時間ごと、無制限ループ）\r\n+# ana = YTAnalysis(\"UCxxxx\", \"growth.json\")\r\n+# ana.start_monitoring(fetch_current_subscribers, interval_seconds=3600)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749792235783,
            "name": "Commit-0",
            "content": "C"
        }
    ]
}