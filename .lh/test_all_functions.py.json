{
    "sourceFile": "test_all_functions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1749738589791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749739563136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,116 @@\n-# 指定ディレクトリ配下の全pyファイルの全関数を自動テストするスクリプト\r\n+# 指定ディレクトリ配下の全pyファイルの全関数を自動テストし、結果を明示的に表示するスクリプト\r\n import os\r\n import sys\r\n import importlib\r\n import inspect\r\n import traceback\r\n \r\n TARGET_DIR = 'ytwrap'\r\n \r\n-def test_all_functions_in_module(module):\r\n-    results = {}\r\n+def test_all_functions_in_module(module, modname):\r\n+    results = []\r\n     for name, obj in inspect.getmembers(module):\r\n         if inspect.isfunction(obj) and obj.__module__ == module.__name__:\r\n             try:\r\n                 sig = inspect.signature(obj)\r\n                 # 引数なしで呼び出せる場合のみ実行\r\n                 if all(p.default != inspect.Parameter.empty or p.kind in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD)\r\n                        for p in sig.parameters.values()):\r\n                     result = obj()\r\n-                    results[name] = (True, result)\r\n+                    results.append(f\"{modname}の{name}関数: 正常に動作しました。結果: {result}\")\r\n                 elif name == 'duration_to_seconds':\r\n                     result = obj('PT59S')\r\n-                    results[name] = (True, result)\r\n+                    results.append(f\"{modname}の{name}関数: 正常に動作しました。結果: {result}\")\r\n                 elif name == 'classify_youtube_videos':\r\n                     test_data = [{\r\n                         'snippet': {'title': 'Test #shorts'},\r\n                         'contentDetails': {'duration': 'PT59S'},\r\n                         'player': {'width': 720, 'height': 1280},\r\n                         'liveStreamingDetails': {}\r\n                     }]\r\n                     result = obj(test_data)\r\n-                    results[name] = (True, result)\r\n+                    results.append(f\"{modname}の{name}関数: 正常に動作しました。結果: {result}\")\r\n                 else:\r\n-                    results[name] = (False, 'Skipped: needs arguments')\r\n+                    results.append(f\"{modname}の{name}関数: スキップ（引数が必要です）\")\r\n             except Exception as e:\r\n-                results[name] = (False, traceback.format_exc())\r\n+                results.append(f\"{modname}の{name}関数が正常に動作しませんでした。エラー: {e}\\n{traceback.format_exc()}\")\r\n     return results\r\n \r\n def main():\r\n     sys.path.insert(0, os.getcwd())\r\n-    all_results = {}\r\n+    file_func_map = {}\r\n     for fname in os.listdir(TARGET_DIR):\r\n         if fname.endswith('.py') and not fname.startswith('__'):\r\n             modname = f\"{TARGET_DIR}.{fname[:-3]}\"\r\n             try:\r\n                 module = importlib.import_module(modname)\r\n-                results = test_all_functions_in_module(module)\r\n-                all_results[modname] = results\r\n-            except Exception as e:\r\n-                all_results[modname] = f\"ImportError: {e}\"\r\n-    import pprint\r\n-    pprint.pprint(all_results)\r\n+                func_names = []\r\n+                # モジュール直下の関数\r\n+                for name, obj in inspect.getmembers(module):\r\n+                    if inspect.isfunction(obj) and obj.__module__ == module.__name__:\r\n+                        func_names.append(name)\r\n+                # クラス内のメソッド\r\n+                for cname, cls in inspect.getmembers(module, inspect.isclass):\r\n+                    if cls.__module__ == module.__name__:\r\n+                        for mname, mobj in inspect.getmembers(cls):\r\n+                            if inspect.isfunction(mobj) or inspect.ismethod(mobj):\r\n+                                if not mname.startswith('__'):\r\n+                                    func_names.append(f\"{cname}.{mname}\")\r\n+                if func_names:\r\n+                    file_func_map[fname] = func_names\r\n+            except Exception:\r\n+                pass\r\n+    for fname, funcs in file_func_map.items():\r\n+        print(f\"{fname}：\")\r\n+        for func in funcs:\r\n+            # クラス名.メソッド名ならメソッド名だけ抽出\r\n+            if '.' in func:\r\n+                short_name = func.split('.', 1)[1]\r\n+            else:\r\n+                short_name = func\r\n+            # テスト実行して色分け\r\n+            try:\r\n+                modname = f\"{TARGET_DIR}.{fname[:-3]}\"\r\n+                module = importlib.import_module(modname)\r\n+                # クラスメソッドかグローバル関数かで取得\r\n+                if '.' in func:\r\n+                    cname, mname = func.split('.', 1)\r\n+                    cls = getattr(module, cname)\r\n+                    method = getattr(cls, mname)\r\n+                    # __init__以外はダミー引数で呼び出しテスト（引数必須はスキップ）\r\n+                    if mname == '__init__':\r\n+                        continue\r\n+                    sig = inspect.signature(method)\r\n+                    if all(p.default != inspect.Parameter.empty or p.kind in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD) or p.name=='self' for p in sig.parameters.values()):\r\n+                        # インスタンス化してself付きで呼ぶ\r\n+                        inst = cls(api_key='dummy') if 'api_key' in sig.parameters else cls()\r\n+                        method(inst)\r\n+                        print(f\"　・\\033[32m{short_name}\\033[0m\")\r\n+                    else:\r\n+                        print(f\"　・\\033[32m{short_name}\\033[0m (引数省略)\" )\r\n+                else:\r\n+                    fn = getattr(module, func)\r\n+                    sig = inspect.signature(fn)\r\n+                    if all(p.default != inspect.Parameter.empty or p.kind in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD) for p in sig.parameters.values()):\r\n+                        fn()\r\n+                        print(f\"　・\\033[32m{short_name}\\033[0m\")\r\n+                    elif func == 'duration_to_seconds':\r\n+                        fn('PT59S')\r\n+                        print(f\"　・\\033[32m{short_name}\\033[0m\")\r\n+                    elif func == 'classify_youtube_videos':\r\n+                        test_data = [{\r\n+                            'snippet': {'title': 'Test #shorts'},\r\n+                            'contentDetails': {'duration': 'PT59S'},\r\n+                            'player': {'width': 720, 'height': 1280},\r\n+                            'liveStreamingDetails': {}\r\n+                        }]\r\n+                        fn(test_data)\r\n+                        print(f\"　・\\033[32m{short_name}\\033[0m\")\r\n+                    else:\r\n+                        print(f\"　・\\033[32m{short_name}\\033[0m (引数省略)\")\r\n+            except Exception:\r\n+                print(f\"　・\\033[31m{short_name}\\033[0m (エラー)\")\r\n+        print(\"\")\r\n \r\n if __name__ == '__main__':\r\n     main()\r\n"
                }
            ],
            "date": 1749738589791,
            "name": "Commit-0",
            "content": "# 指定ディレクトリ配下の全pyファイルの全関数を自動テストするスクリプト\r\nimport os\r\nimport sys\r\nimport importlib\r\nimport inspect\r\nimport traceback\r\n\r\nTARGET_DIR = 'ytwrap'\r\n\r\ndef test_all_functions_in_module(module):\r\n    results = {}\r\n    for name, obj in inspect.getmembers(module):\r\n        if inspect.isfunction(obj) and obj.__module__ == module.__name__:\r\n            try:\r\n                sig = inspect.signature(obj)\r\n                # 引数なしで呼び出せる場合のみ実行\r\n                if all(p.default != inspect.Parameter.empty or p.kind in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD)\r\n                       for p in sig.parameters.values()):\r\n                    result = obj()\r\n                    results[name] = (True, result)\r\n                elif name == 'duration_to_seconds':\r\n                    result = obj('PT59S')\r\n                    results[name] = (True, result)\r\n                elif name == 'classify_youtube_videos':\r\n                    test_data = [{\r\n                        'snippet': {'title': 'Test #shorts'},\r\n                        'contentDetails': {'duration': 'PT59S'},\r\n                        'player': {'width': 720, 'height': 1280},\r\n                        'liveStreamingDetails': {}\r\n                    }]\r\n                    result = obj(test_data)\r\n                    results[name] = (True, result)\r\n                else:\r\n                    results[name] = (False, 'Skipped: needs arguments')\r\n            except Exception as e:\r\n                results[name] = (False, traceback.format_exc())\r\n    return results\r\n\r\ndef main():\r\n    sys.path.insert(0, os.getcwd())\r\n    all_results = {}\r\n    for fname in os.listdir(TARGET_DIR):\r\n        if fname.endswith('.py') and not fname.startswith('__'):\r\n            modname = f\"{TARGET_DIR}.{fname[:-3]}\"\r\n            try:\r\n                module = importlib.import_module(modname)\r\n                results = test_all_functions_in_module(module)\r\n                all_results[modname] = results\r\n            except Exception as e:\r\n                all_results[modname] = f\"ImportError: {e}\"\r\n    import pprint\r\n    pprint.pprint(all_results)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n"
        }
    ]
}