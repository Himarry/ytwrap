{
    "sourceFile": "predict_5000_from_json.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1749792503085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749792728311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,49 @@\n-from ytwrap.analysi import YTAnalysis\r\n-from ytwrap.subscribe import YTSubscribeClient\r\n+from datetime import datetime, timedelta\r\n+import os\r\n import json\r\n \r\n-CHANNEL_ID = \"UCYrHEsf7bhiFJssY5btS7Zg\"\r\n-JSON_PATH = f\"subscribers_{CHANNEL_ID}.json\"\r\n-TARGET = 5000\r\n+from yt_analysis import YTAnalysis\r\n+from yt_subscribe_client import YTSubscribeClient\r\n \r\n-# JSONから履歴を読み込む\r\n-def load_history(json_path):\r\n-    try:\r\n-        with open(json_path, \"r\", encoding=\"utf-8\") as f:\r\n-            data = json.load(f)\r\n-        # [ (\"YYYY-MM-DD\", 登録者数) ] のリストに変換\r\n-        return [(item[\"date\"], item[\"subscribers\"]) for item in data if item[\"channel_id\"] == CHANNEL_ID]\r\n-    except Exception as e:\r\n-        print(f\"履歴データの読み込みに失敗: {e}\")\r\n-        return []\r\n+# テスト用のJSONファイル名\r\n+TEST_JSON = \"test_growth_history.json\"\r\n \r\n-if __name__ == \"__main__\":\r\n-    history = load_history(JSON_PATH)\r\n-    if len(history) < 2:\r\n-        print(\"履歴データが不足しています。まずは YTAnalysis で記録してください。\")\r\n-    else:\r\n-        client = YTSubscribeClient()\r\n-        result = client.predict_milestone_date(history, TARGET)\r\n-        if result:\r\n-            print(f\"登録者{TARGET}人突破予測日: {result['estimated_date']}\")\r\n-            print(f\"あと{result['days_left']}日 (1日あたり増加数: {result['slope']:.2f})\")\r\n-        else:\r\n-            print(\"予測できませんでした（登録者数が増加していない、または履歴が不足）\")\r\n+# テスト前に古いファイルは削除\r\n+if os.path.exists(TEST_JSON):\r\n+    os.remove(TEST_JSON)\r\n+\r\n+# チャンネルIDの例\r\n+CHANNEL_ID = \"UC_TESTCHANNELID\"\r\n+\r\n+# テスト用データ（3日分）\r\n+test_data = [\r\n+    (datetime(2025, 6, 10), 8000),\r\n+    (datetime(2025, 6, 11), 8500),\r\n+    (datetime(2025, 6, 12), 9000),\r\n+]\r\n+\r\n+# 1. YTAnalysisでデータ記録しつつ、YTSubscribeClientに履歴を連携\r\n+ana = YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n+sub_client = YTSubscribeClient(CHANNEL_ID)\r\n+\r\n+for dt, cnt in test_data:\r\n+    ana.record_subscriber_growth(cnt, date=dt, subscribe_client=sub_client)\r\n+\r\n+# 2. YTSubscribeClientの履歴が正常にたまっているかチェック\r\n+print(\"---- YTSubscribeClient履歴 ----\")\r\n+for h in sub_client.history:\r\n+    print(h)\r\n+\r\n+# 3. 予測（例：1万人到達予測）\r\n+result = sub_client.predict_milestone_date(10000)\r\n+print(\"\\n---- 1万人到達予測 ----\")\r\n+if result:\r\n+    print(f\"予想到達日: {result['estimated_date']}（あと{result['days_left']}日）\")\r\n+    print(f\"増加率（1日あたり）: {result['slope']:.2f}\")\r\n+else:\r\n+    print(\"予測できませんでした\")\r\n+\r\n+# 4. 保存されたJSONを確認\r\n+print(\"\\n---- 保存JSON内容 ----\")\r\n+with open(TEST_JSON, \"r\", encoding=\"utf-8\") as f:\r\n+    print(json.dumps(json.load(f), ensure_ascii=False, indent=2))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749792758155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import os\r\n import json\r\n \r\n from yt_analysis import YTAnalysis\r\n-from yt_subscribe_client import YTSubscribeClient\r\n+import ytwrap\r\n \r\n # テスト用のJSONファイル名\r\n TEST_JSON = \"test_growth_history.json\"\r\n \r\n"
                },
                {
                    "date": 1749792763377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n from datetime import datetime, timedelta\r\n import os\r\n import json\r\n-\r\n-from yt_analysis import YTAnalysis\r\n import ytwrap\r\n \r\n # テスト用のJSONファイル名\r\n TEST_JSON = \"test_growth_history.json\"\r\n"
                },
                {
                    "date": 1749792798528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,38 @@\n-from datetime import datetime, timedelta\r\n+from datetime import datetime\r\n import os\r\n import json\r\n-import ytwrap\r\n \r\n-# テスト用のJSONファイル名\r\n+import ytwrap  # ← ここだけでOK\r\n+\r\n TEST_JSON = \"test_growth_history.json\"\r\n-\r\n-# テスト前に古いファイルは削除\r\n if os.path.exists(TEST_JSON):\r\n     os.remove(TEST_JSON)\r\n \r\n-# チャンネルIDの例\r\n CHANNEL_ID = \"UC_TESTCHANNELID\"\r\n-\r\n-# テスト用データ（3日分）\r\n test_data = [\r\n     (datetime(2025, 6, 10), 8000),\r\n     (datetime(2025, 6, 11), 8500),\r\n     (datetime(2025, 6, 12), 9000),\r\n ]\r\n \r\n-# 1. YTAnalysisでデータ記録しつつ、YTSubscribeClientに履歴を連携\r\n-ana = YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n-sub_client = YTSubscribeClient(CHANNEL_ID)\r\n+ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n+sub_client = ytwrap.YTSubscribeClient(CHANNEL_ID)\r\n \r\n for dt, cnt in test_data:\r\n     ana.record_subscriber_growth(cnt, date=dt, subscribe_client=sub_client)\r\n \r\n-# 2. YTSubscribeClientの履歴が正常にたまっているかチェック\r\n print(\"---- YTSubscribeClient履歴 ----\")\r\n for h in sub_client.history:\r\n     print(h)\r\n \r\n-# 3. 予測（例：1万人到達予測）\r\n result = sub_client.predict_milestone_date(10000)\r\n print(\"\\n---- 1万人到達予測 ----\")\r\n if result:\r\n     print(f\"予想到達日: {result['estimated_date']}（あと{result['days_left']}日）\")\r\n     print(f\"増加率（1日あたり）: {result['slope']:.2f}\")\r\n else:\r\n     print(\"予測できませんでした\")\r\n \r\n-# 4. 保存されたJSONを確認\r\n print(\"\\n---- 保存JSON内容 ----\")\r\n with open(TEST_JSON, \"r\", encoding=\"utf-8\") as f:\r\n     print(json.dumps(json.load(f), ensure_ascii=False, indent=2))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749793376775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     os.remove(TEST_JSON)\r\n \r\n CHANNEL_ID = \"UC_TESTCHANNELID\"\r\n test_data = [\r\n-    (datetime(2025, 6, 10), 8000),\r\n+    (datetime(2025, 6, 10), 2000),\r\n     (datetime(2025, 6, 11), 8500),\r\n     (datetime(2025, 6, 12), 9000),\r\n ]\r\n \r\n"
                },
                {
                    "date": 1749793382997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n \r\n CHANNEL_ID = \"UC_TESTCHANNELID\"\r\n test_data = [\r\n     (datetime(2025, 6, 10), 2000),\r\n-    (datetime(2025, 6, 11), 8500),\r\n-    (datetime(2025, 6, 12), 9000),\r\n+    (datetime(2025, 6, 11), 2500),\r\n+    (datetime(2025, 6, 12), 3000),\r\n ]\r\n \r\n ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n sub_client = ytwrap.YTSubscribeClient(CHANNEL_ID)\r\n"
                },
                {
                    "date": 1749793421450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,22 @@\n     (datetime(2025, 6, 11), 2500),\r\n     (datetime(2025, 6, 12), 3000),\r\n ]\r\n \r\n+# 仮の登録者数取得関数（最初だけ使う）\r\n+def dummy_fetch(channel_id):\r\n+    # 実運用ではYouTube API等で取得\r\n+    return test_data[0][1]\r\n+\r\n ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n+\r\n+# record_subscriber_growthを使う前にfetch_current_subscribersを必ず呼ぶ\r\n+ana.fetch_current_subscribers(dummy_fetch)\r\n+\r\n sub_client = ytwrap.YTSubscribeClient(CHANNEL_ID)\r\n \r\n-for dt, cnt in test_data:\r\n+# 2日目以降を追加入力\r\n+for dt, cnt in test_data[1:]:\r\n     ana.record_subscriber_growth(cnt, date=dt, subscribe_client=sub_client)\r\n \r\n print(\"---- YTSubscribeClient履歴 ----\")\r\n for h in sub_client.history:\r\n"
                },
                {
                    "date": 1749793480939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,23 +7,22 @@\n TEST_JSON = \"test_growth_history.json\"\r\n if os.path.exists(TEST_JSON):\r\n     os.remove(TEST_JSON)\r\n \r\n-CHANNEL_ID = \"UC_TESTCHANNELID\"\r\n+CHANNEL_ID = \"UCYrHEsf7bhiFJssY5btS7Zg\"\r\n test_data = [\r\n     (datetime(2025, 6, 10), 2000),\r\n     (datetime(2025, 6, 11), 2500),\r\n     (datetime(2025, 6, 12), 3000),\r\n ]\r\n \r\n-# 仮の登録者数取得関数（最初だけ使う）\r\n+# 仮の登録者数取得関数（初回のみ使用。実運用ではAPI等で取得してください）\r\n def dummy_fetch(channel_id):\r\n-    # 実運用ではYouTube API等で取得\r\n     return test_data[0][1]\r\n \r\n ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n \r\n-# record_subscriber_growthを使う前にfetch_current_subscribersを必ず呼ぶ\r\n+# 必須: record_subscriber_growth前にfetch_current_subscribersを呼ぶ\r\n ana.fetch_current_subscribers(dummy_fetch)\r\n \r\n sub_client = ytwrap.YTSubscribeClient(CHANNEL_ID)\r\n \r\n"
                },
                {
                    "date": 1749793500869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,21 @@\n     (datetime(2025, 6, 10), 2000),\r\n     (datetime(2025, 6, 11), 2500),\r\n     (datetime(2025, 6, 12), 3000),\r\n ]\r\n+import os\r\n+import requests\r\n \r\n-# 仮の登録者数取得関数（初回のみ使用。実運用ではAPI等で取得してください）\r\n-def dummy_fetch(channel_id):\r\n-    return test_data[0][1]\r\n-\r\n+def fetch_youtube_subscribers(channel_id: str) -> int:\r\n+    api_key = os.environ[\"YOUTUBE_API_KEY\"]  # ← 環境変数名はあなたの設定に合わせて\r\n+    url = (\r\n+        \"https://www.googleapis.com/youtube/v3/channels\"\r\n+        f\"?part=statistics&id={channel_id}&key={api_key}\"\r\n+    )\r\n+    resp = requests.get(url)\r\n+    resp.raise_for_status()\r\n+    data = resp.json()\r\n+    return int(data[\"items\"][0][\"statistics\"][\"subscriberCount\"])\r\n ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n \r\n # 必須: record_subscriber_growth前にfetch_current_subscribersを呼ぶ\r\n ana.fetch_current_subscribers(dummy_fetch)\r\n"
                },
                {
                    "date": 1749793520496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,58 @@\n from datetime import datetime\r\n import os\r\n import json\r\n-\r\n import ytwrap  # ← ここだけでOK\r\n \r\n+# --- 設定 ---\r\n TEST_JSON = \"test_growth_history.json\"\r\n-if os.path.exists(TEST_JSON):\r\n-    os.remove(TEST_JSON)\r\n+CHANNEL_ID = \"UCYrHEsf7bhiFJssY5btS7Zg\"\r\n \r\n-CHANNEL_ID = \"UCYrHEsf7bhiFJssY5btS7Zg\"\r\n+# テスト用登録者データ（サンプル）\r\n test_data = [\r\n     (datetime(2025, 6, 10), 2000),\r\n     (datetime(2025, 6, 11), 2500),\r\n     (datetime(2025, 6, 12), 3000),\r\n ]\r\n+\r\n+# テスト用ファイルがあれば削除\r\n+if os.path.exists(TEST_JSON):\r\n+    os.remove(TEST_JSON)\r\n+\r\n+# --- YouTube登録者数取得関数（APIキーは環境変数でセット済みを想定） ---\r\n import os\r\n import requests\r\n \r\n def fetch_youtube_subscribers(channel_id: str) -> int:\r\n-    api_key = os.environ[\"YOUTUBE_API_KEY\"]  # ← 環境変数名はあなたの設定に合わせて\r\n+    api_key = os.environ[\"YOUTUBE_API_KEY\"]  # 例: 環境変数名を合わせてください\r\n     url = (\r\n         \"https://www.googleapis.com/youtube/v3/channels\"\r\n         f\"?part=statistics&id={channel_id}&key={api_key}\"\r\n     )\r\n     resp = requests.get(url)\r\n     resp.raise_for_status()\r\n     data = resp.json()\r\n     return int(data[\"items\"][0][\"statistics\"][\"subscriberCount\"])\r\n+\r\n+# --- 初期化 ---\r\n ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n \r\n-# 必須: record_subscriber_growth前にfetch_current_subscribersを呼ぶ\r\n+# record_subscriber_growthを使う前にfetch_current_subscribersを呼ぶ（初回のみ必須）\r\n+# 本番用: 下の行のコメントを外してください\r\n+# ana.fetch_current_subscribers(fetch_youtube_subscribers)\r\n+\r\n+# テスト用: サンプルデータ（1日目）をダミー関数で登録\r\n+def dummy_fetch(channel_id):\r\n+    return test_data[0][1]\r\n ana.fetch_current_subscribers(dummy_fetch)\r\n \r\n sub_client = ytwrap.YTSubscribeClient(CHANNEL_ID)\r\n \r\n-# 2日目以降を追加入力\r\n+# 2日目以降のデータを入力\r\n for dt, cnt in test_data[1:]:\r\n     ana.record_subscriber_growth(cnt, date=dt, subscribe_client=sub_client)\r\n \r\n+# --- 結果表示 ---\r\n print(\"---- YTSubscribeClient履歴 ----\")\r\n for h in sub_client.history:\r\n     print(h)\r\n \r\n"
                },
                {
                    "date": 1749799471907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n from datetime import datetime\r\n import os\r\n import json\r\n+import time\r\n+import requests\r\n import ytwrap  # ← ここだけでOK\r\n \r\n # --- 設定 ---\r\n TEST_JSON = \"test_growth_history.json\"\r\n@@ -18,11 +20,8 @@\n if os.path.exists(TEST_JSON):\r\n     os.remove(TEST_JSON)\r\n \r\n # --- YouTube登録者数取得関数（APIキーは環境変数でセット済みを想定） ---\r\n-import os\r\n-import requests\r\n-\r\n def fetch_youtube_subscribers(channel_id: str) -> int:\r\n     api_key = os.environ[\"YOUTUBE_API_KEY\"]  # 例: 環境変数名を合わせてください\r\n     url = (\r\n         \"https://www.googleapis.com/youtube/v3/channels\"\r\n@@ -32,16 +31,33 @@\n     resp.raise_for_status()\r\n     data = resp.json()\r\n     return int(data[\"items\"][0][\"statistics\"][\"subscriberCount\"])\r\n \r\n+# --- YTAnalysis拡張: リアルタイム監視機能 ---\r\n+def start_monitoring(\r\n+    ana, fetch_func, interval_seconds=3600, subscribe_client=None, stop_after=None\r\n+):\r\n+    \"\"\"\r\n+    指定間隔ごとに自動で登録者数を監視・記録する\r\n+    :param ana: YTAnalysisインスタンス\r\n+    :param fetch_func: 登録者数取得関数\r\n+    :param interval_seconds: 監視間隔（秒）\r\n+    :param subscribe_client: YTSubscribeClient（任意）\r\n+    :param stop_after: 監視ループ回数（Noneなら無限）\r\n+    \"\"\"\r\n+    ana.fetch_current_subscribers(fetch_func)\r\n+    count = 0\r\n+    while stop_after is None or count < stop_after:\r\n+        time.sleep(interval_seconds)\r\n+        subs = fetch_func(ana.channel_id)\r\n+        ana.record_subscriber_growth(subs, subscribe_client=subscribe_client)\r\n+        count += 1\r\n+        print(f\"[{datetime.now()}] 登録者数: {subs} を記録しました\")\r\n+\r\n # --- 初期化 ---\r\n ana = ytwrap.YTAnalysis(CHANNEL_ID, TEST_JSON)\r\n \r\n-# record_subscriber_growthを使う前にfetch_current_subscribersを呼ぶ（初回のみ必須）\r\n-# 本番用: 下の行のコメントを外してください\r\n-# ana.fetch_current_subscribers(fetch_youtube_subscribers)\r\n-\r\n-# テスト用: サンプルデータ（1日目）をダミー関数で登録\r\n+# record_subscriber_growthを使う前にfetch_current_subscribersを呼ぶ（初回のみ必須、テスト用ダミー）\r\n def dummy_fetch(channel_id):\r\n     return test_data[0][1]\r\n ana.fetch_current_subscribers(dummy_fetch)\r\n \r\n@@ -65,5 +81,10 @@\n     print(\"予測できませんでした\")\r\n \r\n print(\"\\n---- 保存JSON内容 ----\")\r\n with open(TEST_JSON, \"r\", encoding=\"utf-8\") as f:\r\n-    print(json.dumps(json.load(f), ensure_ascii=False, indent=2))\n\\ No newline at end of file\n+    print(json.dumps(json.load(f), ensure_ascii=False, indent=2))\r\n+\r\n+# --- リアルタイム監視の例（1時間ごと、テストでは2回だけ回す） ---\r\n+# 実運用時はinterval_seconds=3600（1時間）, stop_after=None（無限ループ）\r\n+# print(\"\\n---- リアルタイム監視モード ----\")\r\n+# start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=3600, subscribe_client=sub_client, stop_after=2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749799507996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,6 +85,6 @@\n     print(json.dumps(json.load(f), ensure_ascii=False, indent=2))\r\n \r\n # --- リアルタイム監視の例（1時間ごと、テストでは2回だけ回す） ---\r\n # 実運用時はinterval_seconds=3600（1時間）, stop_after=None（無限ループ）\r\n-# print(\"\\n---- リアルタイム監視モード ----\")\r\n-# start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=3600, subscribe_client=sub_client, stop_after=2)\n\\ No newline at end of file\n+print(\"\\n---- リアルタイム監視モード ----\")\r\n+start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=3600, subscribe_client=sub_client, stop_after=2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749799524051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n CHANNEL_ID = \"UCYrHEsf7bhiFJssY5btS7Zg\"\r\n \r\n # テスト用登録者データ（サンプル）\r\n test_data = [\r\n-    (datetime(2025, 6, 10), 2000),\r\n+    (datetime(2025, 6, 14), 2000),\r\n     (datetime(2025, 6, 11), 2500),\r\n     (datetime(2025, 6, 12), 3000),\r\n ]\r\n \r\n"
                },
                {
                    "date": 1749799611690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n \r\n # テスト用登録者データ（サンプル）\r\n test_data = [\r\n     (datetime(2025, 6, 14), 2000),\r\n-    (datetime(2025, 6, 11), 2500),\r\n-    (datetime(2025, 6, 12), 3000),\r\n+    (datetime(2025, 6, 15), 2500),\r\n+    (datetime(2025, 6, 16), 3000),\r\n ]\r\n \r\n # テスト用ファイルがあれば削除\r\n if os.path.exists(TEST_JSON):\r\n"
                },
                {
                    "date": 1749799687433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,5 +86,5 @@\n \r\n # --- リアルタイム監視の例（1時間ごと、テストでは2回だけ回す） ---\r\n # 実運用時はinterval_seconds=3600（1時間）, stop_after=None（無限ループ）\r\n print(\"\\n---- リアルタイム監視モード ----\")\r\n-start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=3600, subscribe_client=sub_client, stop_after=2)\n\\ No newline at end of file\n+start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=100, subscribe_client=sub_client, stop_after=2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749799701154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,5 +86,5 @@\n \r\n # --- リアルタイム監視の例（1時間ごと、テストでは2回だけ回す） ---\r\n # 実運用時はinterval_seconds=3600（1時間）, stop_after=None（無限ループ）\r\n print(\"\\n---- リアルタイム監視モード ----\")\r\n-start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=100, subscribe_client=sub_client, stop_after=2)\n\\ No newline at end of file\n+start_monitoring(ana, fetch_youtube_subscribers, interval_seconds=1, subscribe_client=sub_client, stop_after=None)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749792503085,
            "name": "Commit-0",
            "content": "from ytwrap.analysi import YTAnalysis\r\nfrom ytwrap.subscribe import YTSubscribeClient\r\nimport json\r\n\r\nCHANNEL_ID = \"UCYrHEsf7bhiFJssY5btS7Zg\"\r\nJSON_PATH = f\"subscribers_{CHANNEL_ID}.json\"\r\nTARGET = 5000\r\n\r\n# JSONから履歴を読み込む\r\ndef load_history(json_path):\r\n    try:\r\n        with open(json_path, \"r\", encoding=\"utf-8\") as f:\r\n            data = json.load(f)\r\n        # [ (\"YYYY-MM-DD\", 登録者数) ] のリストに変換\r\n        return [(item[\"date\"], item[\"subscribers\"]) for item in data if item[\"channel_id\"] == CHANNEL_ID]\r\n    except Exception as e:\r\n        print(f\"履歴データの読み込みに失敗: {e}\")\r\n        return []\r\n\r\nif __name__ == \"__main__\":\r\n    history = load_history(JSON_PATH)\r\n    if len(history) < 2:\r\n        print(\"履歴データが不足しています。まずは YTAnalysis で記録してください。\")\r\n    else:\r\n        client = YTSubscribeClient()\r\n        result = client.predict_milestone_date(history, TARGET)\r\n        if result:\r\n            print(f\"登録者{TARGET}人突破予測日: {result['estimated_date']}\")\r\n            print(f\"あと{result['days_left']}日 (1日あたり増加数: {result['slope']:.2f})\")\r\n        else:\r\n            print(\"予測できませんでした（登録者数が増加していない、または履歴が不足）\")\r\n"
        }
    ]
}